<?php

namespace Algorithms\leetcode\editor\cn;

//Áªô‰Ω†‰∏Ä‰∏™ m Ë°å n ÂàóÁöÑÁü©Èòµ matrix ÔºåËØ∑ÊåâÁÖßÈ°∫Êó∂ÈíàËû∫ÊóãÈ°∫Â∫è ÔºåËøîÂõûÁü©Èòµ‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†„ÄÇ
//
//
//
// Á§∫‰æã 1Ôºö
//
//
//ËæìÂÖ•Ôºömatrix = [[1,2,3],[4,5,6],[7,8,9]]
//ËæìÂá∫Ôºö[1,2,3,6,9,8,7,4,5]
//
//
// Á§∫‰æã 2Ôºö
//
//
//ËæìÂÖ•Ôºömatrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
//ËæìÂá∫Ôºö[1,2,3,4,8,12,11,10,9,5,6,7]
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// m == matrix.length
// n == matrix[i].length
// 1 <= m, n <= 10
// -100 <= matrix[i][j] <= 100
//
// Related Topics Êï∞ÁªÑ
// üëç 777 üëé 0

//leetcode submit region begin(Prohibit modification and deletion)
class Solution
{

    /**
     * @param  Integer[][]  $matrix
     *
     * @return Integer[]
     */
    public static function spiralOrder(array $matrix)
    {
        $result = [];
        // Á°ÆÂÆö‰∏äÂ∑¶‰∏ãÂè≥ÂõõËæπ‰ΩçÁΩÆ
        $up = 0;
        $left = 0;
        $bottom = count($matrix) - 1;
        $right = count($matrix[0]) - 1;

        while (true) {
            // ÂèñÂá∫ ‰∏äËæπ - ‰ªéÂ∑¶Âà∞Âè≥
            for ($i = $left; $i <= $right; $i++) {
                $result[] = $matrix[$up][$i];
            }
            // ‰∏äËæπÂ∑≤Áî®Âä†Âêë‰∏ãÈù†1Ôºà+1ÔºâÔºå Â¶ÇÊûúÊØîÂ∫ïËæπÂ§ßÂ∞±Ë∑≥Âá∫
            if (++$up > $bottom) {
                break;
            }

            // ÂèñÂá∫ Âè≥Ëæπ - ‰ªé‰∏äÂà∞‰∏ã
            for ($i = $up; $i <= $bottom; $i++) {
                $result[] = $matrix[$i][$right];
            }
            // Âè≥Èù¢Â∑≤Áî® ÂêëÂ∑¶Èù†1Ôºà-1Ôºâ
            if (--$right < $left) {
                break;
            }

            // ÂèñÂá∫ ‰∏ãËæπ - ‰ªé‰∏ãÂè≥Âà∞‰∏ãÂ∑¶
            for ($i = $right; $i >= $left; $i--) {
                $result[] = $matrix[$bottom][$i];
            }
            // ‰∏ãËæπÂ∑≤Áî®ÂÉè‰∏äÈù†1Ôºà-1Ôºâ
            if (--$bottom < $up) {
                break;
            }

            // ÂèñÂá∫ ‰∏ãËæπ - ‰ªé‰∏ãÂè≥Âà∞‰∏ãÂ∑¶
            for ($i = $bottom; $i >= $up; $i--) {
                $result[] = $matrix[$i][$left];
            }
            // Â∑¶Èù¢Â∑≤Áî®ÂêëÂè≥Èù†1 Ôºà+1Ôºâ
            if (++$left > $right) {
                break;
            }
        }
        return $result;
    }

    /**
     * @param  Integer[][]  $matrix
     *
     * @return Integer[]
     */
    public static function spiralOrder1(array $matrix)
    {
        if ($matrix == null || count($matrix) == 0 || count($matrix[0]) == 0) {
            return $matrix;
        }

        $res = [];
        $rows = count($matrix);
        $columns = count($matrix[0]);
        $total = $columns * $rows;
        $visited = [];
        $directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
        $row = 0;
        $column = 0;
        $directionIndex = 0;

        for ($i = 0; $i < $total; $i++) {
            $res[] = $matrix[$row][$column];
            $visited[$row][$column] = true;
            $nextRow = $row + $directions[$directionIndex][0];
            $nextColumn = $row + $directions[$directionIndex][1];
            if ($nextRow < 0 || $nextRow >= $rows || $nextColumn < 0 || $nextColumn >= $columns || (isset($visited[$nextRow][$nextColumn]) && $visited[$nextRow][$nextColumn])) {
                $directionIndex = ($directionIndex + 1) % 4;
            }
            $row += $directions[$directionIndex][0];
            $column += $directions[$directionIndex][1];
        }

        return $res;
    }
}

//leetcode submit region end(Prohibit modification and deletion)
$matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];
print_r(Solution::spiralOrder($matrix));
