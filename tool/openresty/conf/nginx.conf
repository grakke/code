worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    lua_package_path '/home/henry/Workspace/Code/openresty/lua/?.lua;/blah/?.lua;;';

    server {
        #监听端口，若你的6699端口已经被占用，则需要修改
        listen 6699;

        # curl http://localhost:6699 -i
        location / {
            default_type text/html;

            content_by_lua_block {
                local num = 55
                local str = "string"
                local obj
                ngx.log(ngx.ERR, "num:", num)
                ngx.log(ngx.INFO, " string:", str)
                print([[i am print]])
                ngx.say("HelloWorld")
                ngx.log(ngx.ERR, " object:", obj)
            }
        }

        location /test {
            content_by_lua_block {
                local regex = [[\d+]]

                # -- 参数 "j" 启用 JIT 编译，参数 "o" 是开启缓存必须的
                local m = ngx.re.match("hello, 1234", regex, "jo")
                if m then
                    ngx.say(m[0])
                else
                    ngx.say("not matched!")
                end
            }
        }

        location = /addition {
            # 只允许内部调用
            internal;

            # 这里做了一个求和运算只是一个例子，可以在这里完成一些数据库、
            # 缓存服务器的操作，达到基础模块和业务逻辑分离目的
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }
        }
        location = /subduction {
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }
        # 乘法
        location /multiplication {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(args.a * args.b)
            }
        }

        # 除法
        location /division {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(args.a / args.b)
            }
        }
        location = /app/test {
            content_by_lua_block {
                local res = ngx.location.capture(
                                "/addition", {args={a=3, b=8}}
                                )
                ngx.say("status:", res.status, " response:", res.body)
            }
        }
        # 127.0.0.1:6699/app/test_parallels
        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi( {
                                {"/addition", {args={a=3, b=8}}},
                                {"/subduction", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1 = ngx.location.capture_multi( {
                                {"/addition", {args={a=3, b=8}}}
                            })
                local res2 = ngx.location.capture_multi( {
                                {"/subduction", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        # 这里的两个 location 更像是流水线上工人之间的协作关系。第一环节的工人对完成自己处理部分后，直接交给第二环节处理人（实际上可以有更多环节），它们之间的数据流是定向的
        location ~ ^/static/([-_a-zA-Z0-9/]+).jpg {
            set $image_name $1;
            access_by_lua_block {
                ngx.var.limit_rate = 1000
            }
            content_by_lua_block {
                ngx.exec("/download_internal/images/"
                        .. ngx.var.image_name .. ".jpg");
            }
        }

        location /download_internal {
            internal;
            # 这里还可以有其他统一的 download 下载设置，例如限速等
            alias ../download;
        }

        # 外部重定向
        location = /foo {
            content_by_lua_block {
                ngx.say([[I am foo]])
            }
        }

        location = / {
            rewrite_by_lua_block {
                return ngx.redirect('/foo');
            }
        }
        # curl '127.0.0.1:6699/print_param?a=1&b=2%26' -d "c=3&d=4%26"\n
       location /print_param {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                    ngx.say("[GET ] key:", k, " v:", v)
                end
                -- 解析 body 参数之前一定要先读取 body
                ngx.req.read_body()
                local arg = ngx.req.get_post_args()
                for k,v in pairs(arg) do
                    ngx.say("[POST] key:", k, " v:", v)
                end
            }
        }

        location /test_param {
            content_by_lua_block {
                local res = ngx.location.capture(
                            '/print_param',
                            {
                            method = ngx.HTTP_POST,
                            args = ngx.encode_args({a = 1, b = '2&'}),
                            body = ngx.encode_args({c = 3, d = '4&'})
                            # args = {a = 1, b = '2&'},
                            # body = 'c=3&d=4%26'
                        }
                        )
                ngx.say(res.body)
            }
        }

        # 默认读取 body
        # curl '127.0.0.1:6699/body' -d jack
        lua_need_request_body on;
        location /body {
            content_by_lua_block {
                local data = ngx.req.get_body_data()
                ngx.say("hello ", data)
            }
        }


        location /say {
            content_by_lua_block {
                ngx.say("hello")
                ngx.sleep(3)
                ngx.say("the world")
            }
        }

        location /say1 {
            content_by_lua_block {
                ngx.say("hello")
                ngx.flush() -- 显式的向客户端刷新响应输出
                ngx.sleep(3)
                ngx.say("the world")
            }
        }


        location /chunk {
            content_by_lua_block {
                -- ngx.var.limit_rate = 1024*1024
                local file, err = io.open(ngx.config.prefix() .. "data.db","r")
                if not file then
                    ngx.log(ngx.ERR, "open file error:", err)
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                local data
                while true do
                    data = file:read(1024)
                    if nil == data then
                        break
                    end
                    ngx.print(data)
                    ngx.flush(true)
                end
                file:close()
            }
        }
        # curl '127.0.0.1:6699/api/addition?a=1&b=3'
        # curl '127.0.0.1:6699/api/substraction?a=1&b=3'
        # curl '127.0.0.1:6699/api/multiplition?a=1&b=3'
        # curl '127.0.0.1:6699/api/division?a=1&b=3'
        location ~ ^/api/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            content_by_lua_file lua/$1.lua;
        }

        location /internal_var {
            access_by_lua_block {
                local black_ips = {["127.0.0.1"]=true}
                #
                local ip = ngx.var.remote_addr
                 ngx.print(ip)
                if true == black_ips[ip] then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }

            #处理业务
            content_by_lua_block {
                local a = tonumber(ngx.var.arg_a) or 0
                local b = tonumber(ngx.var.arg_b) or 0
                ngx.say("sum: ", a + b )
            }
        }

        # 子查询
        location /son_query {
            content_by_lua_block {
                res = ngx.location.capture("/bar")
            }
        }
        location /bar {
            echo_location /blah;
        }
        location /blah {
            echo "Success!";
        }

         location /sub {
            content_by_lua_block {
                ngx.say("sub pre: ", ngx.ctx.blah)
                ngx.ctx.blah = 32
                ngx.say("sub post: ", ngx.ctx.blah)
            }
        }

        location /main {
            content_by_lua_block {
                ngx.ctx.blah = 73
                ngx.say("main pre: ", ngx.ctx.blah)
                local res = ngx.location.capture("/sub")
                ngx.print(res.body)
                ngx.say("main post: ", ngx.ctx.blah)
            }
        }
    }
}