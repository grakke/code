#定义Nginx运行的用户
user nginx;

#nginx进程数，建议设置为等于CPU总核心数。
worker_processes 1;

#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log  /var/log/nginx/error.log warn;

#进程pid文件
pid        /var/run/nginx.pid;

events {
    #单个进程最大连接数（最大连接数=连接数*进程数）
    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。
    worker_connections  1024;
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
    #文件扩展名与文件类型映射表
    include      /etc/nginx/mime.types;
    #默认文件类型
    default_type  application/octet-stream;
    #日志格式设定
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #定义本虚拟主机的访问日志
    access_log  /var/log/nginx/access.log  main;

    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。
    sendfile        on;

    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用

    #tcp_nopush    on;

    #keepalive超时时间。
    keepalive_timeout 60;

    #开启gzip压缩输出

    #gzip  on;

    server {
    	listen      80;
  		server_name  www.a.com;

    	#charset koi8-r;
    	#access_log  /var/log/nginx/host.access.log  main;

    	location / {
        	root  /usr/share/nginx/html;
        	index  index.html index.htm;
    	}

	}

#负载均衡配置

# upstream addr{
#     server 39.106.208.66:8761 weight=1;
#     server 39.106.208.66:8762 weight=1;
# }

	#虚拟主机的配置
	server {
	    #监听端口
	    listen      81;

	    #域名可以有多个，用空格隔开
	    server_name  www.b.com;

	    #charset koi8-r;
    	#access_log  /var/log/nginx/host.access.log  main;

	    #对 "/" 启用反向代理
	    location / {
        	proxy_pass  http://addr;
        	proxy_redirect off;

	        proxy_set_header X-Real-IP $remote_addr;
       		#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
	        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

       		#以下是一些反向代理的配置，可选。
        	proxy_set_header Host $host;

	        #允许客户端请求的最大单文件字节数
       		client_max_body_size 10m;

     	   #缓冲区代理缓冲用户端请求的最大字节数，
	        #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。
	        #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误
	        client_body_buffer_size 128k;
	        #表示使nginx阻止HTTP应答代码为400或者更高的应答。
	        proxy_intercept_errors on;

	        #后端服务器连接的超时时间_发起握手等候响应超时时间
	        #nginx跟后端服务器连接超时时间(代理连接超时)
	        proxy_connect_timeout 90;

	        #后端服务器数据回传时间(代理发送超时)
	        #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
	        proxy_send_timeout 90;

	        #连接成功后，后端服务器响应时间(代理接收超时)
	        #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）
	        proxy_read_timeout 90;

	        #设置代理服务器（nginx）保存用户头信息的缓冲区大小

	        #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小

	        proxy_buffer_size 4k;

	        #proxy_buffers缓冲区，网页平均在32k以下的设置

	        #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k
	        proxy_buffers 4 32k;

	        #高负荷下缓冲大小（proxy_buffers*2）
	        proxy_busy_buffers_size 64k;

	        #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长
	        #设定缓存文件夹大小，大于这个值，将从upstream服务器传
	        proxy_temp_file_write_size 64k;
	    }
	}

}
