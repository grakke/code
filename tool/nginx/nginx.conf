# Configuration File - Nginx Server Configs
# http://nginx.org/en/docs/dirindex.html

# Run as a unique, less privileged user for security reasons.
# Default: nobody nobody
user www www;

# Sets the worker threads to the number of CPU cores available in the system for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
# Default: 1
worker_processes auto;

# Maximum number of open files per worker process.
# Should be > worker_connections.
# Default: no limit
worker_rlimit_nofile 8192;

events {
    # If you need more connections than this, you start optimizing your OS.
    # That's probably the point at which you hire people who are smarter than you as this is *a lot* of requests.
    # Should be < worker_rlimit_nofile.
    # Default: 512
    worker_connections 8000;
}

# Log errors and warnings to this file
# This is only used when you don't override it on a server{} level
# Default: logs/error.log error
error_log logs/error.log warn;

# The file storing the process ID of the main process
# Default: nginx.pid
pid /var/run/nginx.pid;

http {

    # Hide nginx version information.
    # Default: on
    server_tokens off;

    # Specify MIME types for files.
    include mime.types;

    # Default: text/plain
    default_type application/octet-stream;

    # Update charset_types to match updated mime.types.
    # text/html is always included by charset module.
    # Default: text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml
    charset_types
    text/css
    text/plain
    text/vnd.wap.wml
    application/javascript
    application/json
    application/rss+xml
    application/xml;

    # Include $http_x_forwarded_for within default format used in log files
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    # 配置NGINX的日志格式 json
    log_format json ' {
        #$#%#$#placeholder03434#$#%#$#:#$#%#$#placeholder13434#$#%#$#,'
        '"host":"$server_addr",'
        '"clientip":"$remote_addr",'
        '"size":$body_bytes_sent,'
        '"responsetime":$request_time,'
        '"upstreamtime":"$upstream_response_time",'
        '"upstreamhost":"$upstream_addr",'
        '"http_host":"$host",'
        '"url":"$uri",'
        '"xff":"$http_x_forwarded_for",'
        '"referer":"$http_referer",'
        '"agent":"$http_user_agent",'
        '"status":#$#%#$#placeholder13434#$#%#$
    }
    ';
    # Log access to this file
    # This is only used when you don't override it on a server{} level
    # Default: logs/access.log combined
    access_log logs/access.log main;
    # access_log logs/access.log myformat;
    error_log logs/error_log warn;

    # How long to allow each connection to stay idle.
    # Longer values are better for each individual client, particularly for SSL,
    # but means that worker connections are tied up longer.
    # Default: 75s
    keepalive_timeout 20s;

    # Speed up file transfers by using sendfile() to copy directly
    # between descriptors rather than using read()/write().
    # For performance reasons, on FreeBSD systems w/ ZFS
    # this option should be disabled as ZFS's ARC caches
    # frequently used files in RAM by default.
    # Default: off
    sendfile on;

    # Don't send out partial frames; this increases throughput
    # since TCP frames are filled up before being sent out.
    # Default: off
    tcp_nopush on;
    # Enable gzip compression.
    include snippets/web_performance/compression.conf;

    # Specify file cache expiration.
    include snippets/web_performance/cache_expiration.conf;

    # Add Cache-Control.
    # snippets/web_performance/cache-control.conf
    map $sent_http_content_type $cache_control {
        default "public, immutable, stale-while-revalidate";

        # No content
        "" "no-store";

        # Manifest files
        ~*application/manifest\+json "public";
        ~*text/cache-manifest ""; # `no-cache` (*)

        # Assets
        ~*image/svg\+xml "public, immutable, stale-while-revalidate";

        # Data interchange
        ~*application/(atom|rdf|rss)\+xml "public, stale-while-revalidate";

        # Documents
        ~*text/html "private, must-revalidate";
        ~*text/markdown "private, must-revalidate";
        ~*text/calendar "private, must-revalidate";

        # Data
        ~*json ""; # `no-cache` (*)
        ~*xml ""; # `no-cache` (*)
    }

    # Add X-Frame-Options for HTML documents.
    # snippets/security/x-frame-options.conf
    map $sent_http_content_type $x_frame_options {
        ~*text/html DENY;
    }

    # Add Content-Security-Policy for HTML documents.
    # snippets/security/content-security-policy.conf
    map $sent_http_content_type $content_security_policy {
        ~*text/(html|javascript)|application/pdf|xml "default-src 'self'; base-uri 'none'; form-action 'self'; frame-ancestors 'none'; object-src 'none'; upgrade-insecure-requests";
    }

    # Add Permissions-Policy for HTML documents.
    # snippets/security/permissions-policy.conf
    map $sent_http_content_type $permissions_policy {
        ~*text/(html|javascript)|application/pdf|xml "accelerometer=(),autoplay=(),browsing-topics=(),camera=(),display-capture=(),document-domain=(),encrypted-media=(),fullscreen=(),geolocation=(),gyroscope=(),magnetometer=(),microphone=(),midi=(),payment=(),picture-in-picture=(),publickey-credentials-get=(),screen-wake-lock=(),sync-xhr=(self),usb=(),web-share=(),xr-spatial-tracking=()";
    }

    # Add Referrer-Policy for HTML documents.
    # snippets/security/referrer-policy.conf
    map $sent_http_content_type $referrer_policy {
        ~*text/(css|html|javascript)|application\/pdf|xml "strict-origin-when-cross-origin";
    }

    # Add Cross-Origin-Policies for HTML documents.
    # snippets/security/cross-origin-policy.conf
    # Cross-Origin-Embedder-Policy
    map $sent_http_content_type $coep_policy {
        ~*text/(html|javascript)|application/pdf|xml "require-corp";
    }
    # Cross-Origin-Opener-Policy
    map $sent_http_content_type $coop_policy {
        ~*text/(html|javascript)|application/pdf|xml "same-origin";
    }
    # Cross-Origin-Resource-Policy
    map $sent_http_content_type $corp_policy {
        ~*text/(html|javascript)|application/pdf|xml "same-origin";
    }

    # Add Access-Control-Allow-Origin.
    # snippets/cross-origin/requests.conf
    map $sent_http_content_type $cors {
        # Images
        ~*image/ "*";

        # Web fonts
        ~*font/ "*";
        ~*application/vnd.ms-fontobject "*";
        ~*application/x-font-ttf "*";
        ~*application/font-woff "*";
        ~*application/x-font-woff "*";
        ~*application/font-woff2 "*";
    }

    # Enable gzip compression.
    # Default: off
    # 默认情况下，Nginx的gzip压缩是关闭的， gzip压缩功能可以让节省带宽，会增加服务器CPU的开销，默认只对text/html进行压缩 ，如果要对html之外的内容进行压缩传输，需要手动来设置。
    # gzip_buffers 4 16k;
    # gzip_http_version 1.0;
    # gzip_comp_level 2;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and CPU usage, offering about
    # 75% reduction for most ASCII files (almost identical to level 9).
    # Default: 1
    gzip_comp_level 5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    # Default: 20
    gzip_min_length 256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    # Default: off
    gzip_proxied any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    # Default: off
    gzip_vary on;

    # Compress all output labeled with one of the following MIME-types.
    # text/html is always compressed by gzip module.
    # Default: text/html
    gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;

    # This should be turned on if you are going to have pre-compressed copies (.gz) of
    # static files available. If not it should be left off as it will cause extra I/O
    # for the check. It is best if you enable this in a location{} block for
    # a specific directory, or on an individual server{} level.
    # gzip_static on;

    send_timeout 3;
    autoindex on;
    autoindex_exact_size off;
    autoindex_localtime on;

    fastcgi_connect_timeout 2;
    fastcgi_send_timeout 3;
    fastcgi_read_timeout 1;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    # 为打开文件指定缓存，默认是没有启用，max 指定缓存数量，
    # 建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。
    open_file_cache max=204800 inactive=20s;

    # open_file_cache 指令中的inactive 参数时间内文件的最少使用次数，
    # 如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个
    # 文件在inactive 时间内一次没被使用，它将被移除。
    open_file_cache_min_uses 1;

    # 多长时间检查一次缓存的有效信息
    open_file_cache_valid 30s;

    proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m
    use_temp_path=off;

    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    upstream test.net {
        ip_hash;
        server 192.168.10.13:80;
        server 192.168.10.14:80 down;
        server 192.168.10.15:8009 max_fails=3 fail_timeout=20s;
        server 192.168.10.16:8080;
    }

    include /opt/nginx/snippets/kanban.conf;

    upstream php-upstream {
        server 192.168.0.1:80;
    }

    upstream webservers {
        server 192.168.18.201 weight=1 max_fails=2 fail_timeout=2;
        server 192.168.18.202 weight=1 max_fails=2 fail_timeout=2;
        server 127.0.0.1:8080 backup;
    }

    index index.php index.htm index.html;

    server {
        listen 80;
        server_name localhost;

        charset utf-8;
        root html;
        index index.html index.htm;

        access_log logs/host.access.log main;
        error_log logs/error.log warn;

        location / {
            try_files $uri $uri/ /index.html;
            # try_files $uri $uri/ /index.php?q=$uri&$args;
        }

        location /reverse_proxy {
            proxy_cache my_cache;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 3;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;

            proxy_pass https://github.com;

            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        include /opt/nginx/snippets/phpmyadmin.conf;
        include syntax.conf;

        # burst:漏桶算法中“桶”最多可以接受个请求
        location /limit {
            # limit_req_zone=mylimit burst=20 nodelay;
            # limit_req_log_level warn;
            # limit_req_status 429;

            return 300 "hello module limit";
        }

        location /upstream {
            proxy_pass http://test.net;
            proxy_set_header X-Real-IP $remote_addr;
        }


        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        #
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
        location /status {
            stub_status on;
            #allow IP地址;
            #deny IP地址;
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    server {
        listen 8000;
        listen somename:8080;
        server_name somename alias another.alias;
        location / {
            root html;
            index index.html index.htm;
        }
    }

    server {
        listen 443 ssl;
        server_name localhost;
        ssl_certificate cert.pem;
        ssl_certificate_key cert.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        location / {
            root html;
            index index.html index.htm;
        }
    }

    # Include files in the sites-enabled folder. server{} configuration files should be
    # placed in the sites-available folder, and then the configuration should be enabled
    # by creating a symlink to it in the sites-enabled folder.
    # See doc/sites-enabled.md for more info.
    include conf.d/*.conf;
    include sites-enabled/*.conf;
}
